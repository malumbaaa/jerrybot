from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State,StatesGroup

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ParseMode
import keyboards

from StateMachine import NewStateMachine
from aiogram import Bot, Dispatcher, executor, types
from handlers.admin.delete_dish_handler import DeleteDishStateMachine
from handlers.admin.sendings_handler import AdminSendMessageStateMachine


class AdminStates(StatesGroup):
    choose_stat_type = State()


async def admin_sending(message: types.Message, state: FSMContext):
    await state.set_state(AdminSendMessageStateMachine.admin_message_state)
    await message.bot.send_message(text='–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ', chat_id=message.chat.id)


async def add_dish(message: types.Message):
    kb = keyboards.get_categories_kb()
    kb.add(types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é', callback_data='category;addnew'))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=kb)


async def delete_dish(message: types.Message, state: FSMContext):
    await state.set_state(DeleteDishStateMachine.admin_delete_dish.set())
    deletion_kb = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    deletion_kb.add(types.KeyboardButton(text="‚ùå–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —É–¥–∞–ª–µ–Ω–∏—è‚ùå"))
    await message.answer("–†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –±–ª—é–¥", reply_markup=deletion_kb)
    kb = keyboards.get_categories_kb()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=kb)


# —Ñ—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def admin_message(message: types.Message, state: FSMContext):
    if message.text.startswith("‚ùå–í—ã–π—Ç–∏"):
        rm_kb = types.ReplyKeyboardRemove()
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(types.KeyboardButton(text="üçΩ–ú–µ–Ω—éüçΩ"))
        kb.add(types.KeyboardButton(text="ü™ë–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ü™ë"))
        await state.reset_state()  # exit from admin state
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞", reply_markup=kb)
    else:
        print(message.content_type)
        await message.answer("–ó–¥–∞—Ä–æ–≤–∞, –∞–¥–º–∏–Ω!")


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–¥–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def admin_statistics(message: types.Message):
    kb = InlineKeyboardMarkup()
    await AdminStates.choose_stat_type.set()
    kb.add(types.InlineKeyboardButton('–ö–ª–∏–µ–Ω—Ç—ã', callback_data='stat;clients'))
    kb.add(types.InlineKeyboardButton('–í—Ä–µ–º—è', callback_data='stat;time'))
    kb.add(types.InlineKeyboardButton('–ó–∞–∫–∞–∑—ã', callback_data='stat;orders'))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', reply_markup=kb)


def register_admin_menu_handlers(dp: Dispatcher):
    dp.register_message_handler(admin_sending, commands=['send_message'], state=NewStateMachine.ADMIN)
    dp.register_message_handler(admin_sending, lambda m: m.text.startswith('‚úâ–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'),
                                state=NewStateMachine.ADMIN)
    dp.register_message_handler(admin_statistics, commands=['stat'], state=NewStateMachine.ADMIN)
    dp.register_message_handler(admin_statistics, lambda m: m.text.startswith('üìä–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'),
                                state=NewStateMachine.ADMIN)
    dp.register_message_handler(admin_message, state=NewStateMachine.ADMIN)
    dp.register_message_handler(delete_dish, commands=['delete'], state=NewStateMachine.ADMIN)
    dp.register_message_handler(delete_dish, lambda m: m.text.startswith('üóë–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æüóë'),
                                state=NewStateMachine.ADMIN)
    dp.register_message_handler(add_dish, commands=['add'], state=NewStateMachine.ADMIN)
    dp.register_message_handler(add_dish, lambda m: m.text.startswith('üçΩ–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æüçΩ'), state=NewStateMachine.ADMIN)
